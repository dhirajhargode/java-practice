
package com.dc.beans;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;

import com.dc.mapper.BookMapper;
import com.dc.model.Book;

public class AppDao {

	private JdbcTemplate jdbctemplate;

	private static final String Insert_Query = "INSERT INTO BOOK_STORE(BOOK_ID,AUTHOR_NAME,BOOK_NAME,PRICE,ISBN) VALUES(?,?,?,?,?)";
	private static final String Find_By_ID = "SELECT * FROM BOOK_STORE WHERE BOOK_ID=?";
	private static final String Find_By_Price = "SELECT * FROM BOOK_STORE WHERE PRICE>=?";
	private static final String Find_All_Books = "SELECT * FROM BOOK_STORE";

	public void insertBook(int bid, String aname, String bname, Double price, String isbn) {

		int no = jdbctemplate.update(Insert_Query, bid, aname, bname, price, isbn);
		if (no > 0)
			System.out.println("sucessfully inserted....");
		else
			System.out.println("failed....");

	}

	public Boolean insertBookWithPstm(int bid, String aname, String bname, Double price, String isbn) {

		PreparedStatementCallback<Boolean> pstmcall = new PreparedStatementCallback<Boolean>() {

			public Boolean doInPreparedStatement(PreparedStatement pstm) throws SQLException, DataAccessException {
				pstm.setInt(1, bid);
				pstm.setString(2, aname);
				pstm.setString(3, bname);
				pstm.setDouble(4, price);
				pstm.setString(5, isbn);
				return pstm.execute();
			}
		};
		return jdbctemplate.execute(Insert_Query, pstmcall);
	}

	public Book findBookId(int bid) {
		return jdbctemplate.queryForObject(Find_By_ID, new Object[] { bid }, new BookMapper());
	}

	public List<Book> findBookByPrice(double price) {
		return jdbctemplate.query(Find_By_Price, new Object[] { price }, new BookMapper());
	}

	public List<Book> findAllBook() {
		return jdbctemplate.query(Find_All_Books, new BookMapper());
	}

	public Map<String, Object> findByUsingMap(int bid) {
		return jdbctemplate.queryForMap(Find_By_ID, bid);
	}

	public List<Map<String, Object>> findByUsingListMap() {
		return (List<Map<String, Object>>) jdbctemplate.queryForList(Find_All_Books);
	}

	public void setJdbctemplete(JdbcTemplate jdbctemplate) {
		this.jdbctemplate = jdbctemplate;
	}

}
